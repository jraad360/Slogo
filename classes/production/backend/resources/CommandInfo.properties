#
# Turtle Commands
#
Forward = Parameters: pixels (int). Moves turtle forward in its current heading by pixels distance. Returns the value of pixels.
Backward = Parameters: pixels (int). Moves turtle backward in its current heading by pixels distance. Returns the value of pixels.
Left = Parameters: degrees (int). Turns turtle counterclockwise by degrees angle. Returns the value of degrees.
Right = Parameters: degrees (int). Turns turtle clockwise by degrees angle. Returns the value of degrees.
SetHeading = Parameters: degrees (int). Turns turtle to an absolute heading given by degrees. Returns number of degrees moved.
SetTowards = Parameters: x y (int int). Turns turtle to face the point (x, y), where (0, 0) is the center of the screen. Returns the number of degrees turtle turned.
SetPosition = Parameters: x y (int int). Moves turtle to an absolute screen position, where (0, 0) is the center of the screen. Returns the distance turtle moved.
PenDown = Parameters: none. Puts pen down such that when the turtle moves, it leaves a trail. Returns 1.
PenUp = Parameters: none. Puts pen up such that when the turtle moves, it does not leave a trail. Returns 0.
ShowTurtle = Parameters: none. Makes turtle visible. Returns 1.
HideTurtle = Parameters: none. Makes turtle invisible. Returns 0.
Home = Parameters: none. Moves turtle to the center of the screen (0 0). Returns the distance turtle moved.
ClearScreen = Parameters: none. Erases turtle's trails and sends it to the home position. Returns the distance turtle moved.
#
# Turtle Queries
#
XCoordinate = Parameters: none. Returns the turtle's X coordinate from the center of the screen.
YCoordinate = Parameters: none. Returns the turtle's Y coordinate from the center of the screen.
Heading = Parameters: none. Returns the turtle's heading in degrees.
IsPenDown = Parameters: none. Returns 1 if turtle's pen is down, 0 if it is up.
IsShowing = Parameters: none. Returns 1 if turtle is showing, 0 if it is hiding.
#
# Math Operations
#
Sum = Parameters: expr1 expr2 (int int). Returns sum of the values of expr1 and expr2.
Difference = Parameters: expr1 expr2 (int int). Returns difference of the values of expr1 and expr2.
Product = Parameters: expr1 expr2 (int int). Returns product of the values of expr1 and expr2.
Quotient = Parameters: expr1 expr2 (int int). Returns quotient of the values of expr1 and expr2.
Remainder = Parameters: expr1 expr2 (int int). Returns remainder on dividing the value of expr1 by expr2.
Minus = Parameters: expr (int). Returns negative of the values of expr.
Random = Parameters: max (int). Returns random non-negative number strictly less than max.
Sine = Parameters: degrees (int). Returns sine of degrees.
Cosine = Parameters: degrees (int). Returns cosine of degrees.
Tangent = Parameters: degrees (int). Returns tangent of degrees.
ArcTangent = Parameters: degrees (int). Returns arctangent of degrees.
NaturalLog = Parameters: expr (int). Returns natural log of expr.
Power = Parameters: base exponent (int int). Returns base raised to the power of exponent.
Pi = Parameters: none. Reports the number of pi.
#
# Boolean Operations
#
LessThan = Parameters: expr1 expr2 (int int). Returns 1 if the value of expr1 is strictly less than the value of expr2, otherwise 0.
GreaterThan = Parameters: expr1 expr2 (int int). Returns 1 if the value of expr1 is strictly greater than the value of expr2, otherwise 0.
Equal = Parameters: expr1 expr2 (int int). Returns 1 if the value of expr1 and the value of expr2 are equal, otherwise 0.
NotEqual = Parameters: expr1 expr2 (int int). Returns 1 if the value of expr1 and the value of expr2 are not equal, otherwise 0.
And = Parameters: test1 test2 (int int). Returns 1 if test1 and test2 are non-zero, otherwise 0.
Or = Parameters: test1 test2 (int int). Returns 1 if test1 or test2 are non-zero, otherwise 0.
Not = Parameters: test (int). Returns 1 if test is 0 and 0 if test is non-zero.
#
# Variables, Control, and User-Defined Commands
#
MakeVariable = Parameters: variable expr (String int). Assigns the value of expr to variable, creating the variable if necessary. Returns expr.
Repeat = Parameters: expr [command(s)] (int [String(s)]). Runs command(s) given in the list the value of expr number of times. Eeturns the value of the final command executed (or 0 if no commands are executed). Note, the value of the current iteration, starting at 1, is automatically assigned to the variable :repcount so that it can be accessed by the command(s).
DoTimes = Parameters: [variable limit] [command(s)] ([String int] [String(s)]). Runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive. Returns the value of the final command executed (or 0 if no commands are executed). Note, variable is assigned to each succeeding value so that it can be accessed by the command(s).
For = Parameters: [variable start end increment] [command(s)] ([String int int int] [String(s)]). Runs command(s) for each value specified in the range, i.e., from (start - end), going by increment. Returns the value of the final command executed (or 0 if no commands are executed). Note, variable is assigned to each succeeding value so that it can be accessed by the command(s).
If = Parameters: expr [command(s)] (int [String(s)]). If expr is not 0, runs the command(s) given in the list. Returns the value of the final command executed (or 0 if no commands are executed).
IfElse = Parameters: expr [trueCommand(s)][falseCommand(s)] (int [String(s)][String(s)]). If expr is not 0, runs the trueCommands given in the first list, otherwise runs the falseCommands given in the second list. Returns the value of the final command executed (or 0 if no commands are executed).
MakeUserInstruction = Parameters: commandName [variable(s)][command(s)] (String [String(s)][String(s)]). Assigns command(s) given in the second list to commandName using parameters given in first list as variables. When commandName is used later in a program, any given values are assigned to variables that can be accessed when the command list is run and the value of the final command executed is returned (or 0 if no commands are executed). Returns 1 if command is successfully defined, otherwise 0.
#
# Display Commands
#
SetBackground = Parameters: index (int). Sets background color of screen to that represented by index. Returns given index.
SetPenColor = Parameters: index (int). Sets color of the pen to that represented by index. Returns given index.
SetPenSize = Parameters: pixels (int). Sets size of the pen to be pixels thickness. Returns given pixels.
SetShape = Parameters: index (int). Sets shape of turtle to that represented by index. Returns given index.
SetPalette = Parameters: index r g b (int int int). Sets color corresponding at given index to given r g b color values. Returns given index. Note, color component values are nonnegative integers less than 256 specifying an amount of red, green, and blue.
GetPenColor = Parameters: none. Returns turtle's current color index.
GetShape = Parameters: none. Returns turtle's current shape index.
Stamp = stamp
ClearStamps = clearstamps
#
# Multiple Turtle Commands
#
ID = Parameters: none. Returns current active turtle's ID number. ID values typically start at 1 and increase by 1 with each new turtle created. Note, there is technically only one "active turtle" at any given time since each command is run once for each active turtle, i.e., this value can always be used to identify the current turtle running the command.
Turtles = Parameters: none. Returns number of turtles created so far.
Tell = Parameters: [turtle(s)] ([int(s)]). Sets turtles that will follow commands hereafter. Returns last value in turtles list. Note, if turtle has not previously existed, it is created and placed at the home location. Note, if more than one turtle is active, commands run return value associated with the last active turtle.
Ask = Parameters: [turtle(s)][command(s)] ([int(s)][String(s)]). Only the turtles given in first list all run commands given in the second list. Returns result of last command run by the last turtle. Note, after commands are run, currently active list of turtles returns to that set by the last TELL command (or default active turtle if TELL never given). Note, if more than one turtle is active, commands run return value associated with the last active turtle.
AskWith = Parameters: [condition][command(s)] ([][int(s)]). Tell turtles matching given condition to run commands given in the second list. Returns result of last command run. Note, after commands are run, currently active list of turtles returns to that set by the last TELL command (or default active turtle if TELL never given). Note, if more than one turtle is active, commands run return value associated with the last active turtle.
